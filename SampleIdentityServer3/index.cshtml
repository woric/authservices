<!DOCTYPE html>
<html>
<head>
    <title>IdentityServer3 Sample Application</title>
	<meta charset="utf-8" />
    <style>
        #idp-initiated-logout-frame
        {
            width: 80%;
            height: 500px;
        }
    </style>
</head>
<body>
    <h1>IdentityServer3 Sample Application</h1>
    <p>
        This is a sample setup of IdentityServer3 with Kentor.AuthServices. The
        IdentityServer3 is running in the same application at <a href="/IdSrv3">
            /IdSrv3
        </a>.
    </p>

    <h1>Server Side Login</h1>
    <p>
        @if (User.Identity.IsAuthenticated)
        {
            <span id="status">You are currently logged in.</span>

            <h2>Claims</h2>
            <table>
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var c in System.Security.Claims.ClaimsPrincipal.Current.Claims)
                    {
                        <tr>
                            <td>@c.Type</td>
                            <td>@c.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <span id="status">You are currently not logged in.</span>
        }
    </p>
    <p>
        @if (User.Identity.IsAuthenticated)
        {
            <button onclick="location='/ServerSide-logout';">Logout</button>
        }
        else
        {
            <button onclick="location='/ServerSide-Login';">Login</button>
        }
        <button onclick="location = '/';">Refresh status</button>
    </p>
    <h1>Client Side Login</h1>

    <button class="btn btn-default request" data-scope='openid' data-type='id_token'>Login</button>
    <button class="btn btn-info logout">Logout</button>

    <div class="row">
        <ul class="list-unstyled list-inline"></ul>
    </div>

    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">Authorization Response</div>
            <div class="panel-body">
                <pre id="response"></pre>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-4">
            <div class="panel panel-default">
                <div class="panel-heading">ID Token Contents</div>
                <div class="panel-body">
                    <pre id="id-token"></pre>
                </div>
            </div>
        </div>

        <div class="col-sm-4">
            <div class="panel panel-default">
                <div class="panel-heading">Access Token</div>
                <div class="panel-body">
                    <pre id="access-token"></pre>
                </div>
            </div>
        </div>
    </div>

    <script src="oidc-token-manager.js"></script>

    <script>
        var config = {
            authority: "http://localhost:4589/IdSrv3",
            client_id: "clientside",
            redirect_uri: "http://localhost:4589/",
            post_logout_redirect_uri: "http://localhost:4589/",

            response_type: "id_token token",
            scope: "openid profile email read write",

            // silent renew will get a new access_token via an iframe 
            // just prior to the old access_token expiring (60 seconds prior)
            silent_redirect_uri: window.location.protocol + "//" + window.location.host + "/silent_renew.html",
            silent_renew: true,

            store: window.sessionStorage
        };

        var mgr = new OidcTokenManager(config);

        mgr.addOnTokenObtained(function () {
            console.log("token obtained");
        });
        mgr.addOnTokenRemoved(function () {
            display("#response", { message: "Logged Out" });
            showTokens();
        });

        function display(selector, data) {
            if (data && typeof data === 'string') {
                data = JSON.parse(data);
            }
            if (data) {
                data = JSON.stringify(data, null, 2);
            }
            document.querySelector(selector).textContent = data;
        }

        function showTokens() {
            display("#id-token", mgr.profile || "");
            display("#access-token", mgr.access_token && { access_token: mgr.access_token, expires_in: mgr.expires_in } || "");
            checkSessionState();
        }
        showTokens();

        function handleCallback() {
            mgr.processTokenCallbackAsync().then(function () {
                var hash = window.location.hash.substr(1);
                var result = hash.split('&').reduce(function (result, item) {
                    var parts = item.split('=');
                    result[parts[0]] = parts[1];
                    return result;
                }, {});
                display("#response", result);

                showTokens();
            }, function (error) {
                display("#response", error.message && { error: error.message } || error);
            });
        }

        function authorize(scope, response_type) {
            config.scope = scope;
            config.response_type = response_type;
            mgr.redirectForToken();
        }

        function logout() {
            mgr.redirectForLogout();
        }

        function callApi() {
            var xhr = new XMLHttpRequest();
            xhr.onload = function (e) {
                if (xhr.status >= 400) {
                    display("#ajax-result", {
                        status: xhr.status,
                        statusText: xhr.statusText,
                        wwwAuthenticate: xhr.getResponseHeader("WWW-Authenticate")
                    });
                }
                else {
                    display("#ajax-result", xhr.response);
                }
            };
            xhr.onerror = function () {
                if (xhr.status === 401) {
                    mgr.removeToken();
                    showTokens();
                }

                display("#ajax-result", {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    wwwAuthenticate: xhr.getResponseHeader("WWW-Authenticate")
                });
            };
            xhr.open("GET", "http://localhost:2727/identity", true);
            xhr.setRequestHeader("Authorization", "Bearer " + mgr.access_token);
            xhr.send();
        }

        if (window.location.hash) {
            handleCallback();
        }

        [].forEach.call(document.querySelectorAll(".request"), function (button) {
            button.addEventListener("click", function () {
                authorize(this.dataset["scope"], this.dataset["type"]);
            });
        });

        document.querySelector(".logout").addEventListener("click", logout, false);

        function checkSessionState() {
            mgr.oidcClient.loadMetadataAsync().then(function (meta) {
                if (meta.check_session_iframe && mgr.session_state) {
                    document.getElementById("rp").src = "check_session.html#" +
                        "session_state=" + mgr.session_state +
                        "&check_session_iframe=" + meta.check_session_iframe +
                        "&client_id=" + config.client_id
                    ;
                }
                else {
                    document.getElementById("rp").src = "about:blank";
                }
            });
        }
        window.onmessage = function (e) {
            if (e.origin === window.location.protocol + "//" + window.location.host && e.data === "changed") {
                mgr.removeToken();
                mgr.renewTokenSilentAsync().then(function () {
                    // Session state changed but we managed to silently get a new identity token, everything's fine
                    console.log('renewTokenSilentAsync success');
                }, function () {
                    // Here we couldn't get a new identity token, we have to ask the user to log in again
                    console.log('renewTokenSilentAsync failed');
                });
            }
        }
    </script>

    <iframe id="rp" style="display:none"></iframe>

    <h1>Idp-initiated logout</h1>
    <p>
        Issue a front channel idp-initiated logout by loading the stub idp
        in an iframe that auto-posts the logout.
    </p>

    <button id="idp-initiated-logout">Idp-initiated Logout</button>
    <br />

    <iframe id="idp-initiated-logout-frame" style="display:none"></iframe>

    <script>
        function idpLogout()
        {
            var iframe = document.getElementById("idp-initiated-logout-frame");
            iframe.style = "";

            iframe.src = "http://localhost:52071/Logout?NameId=JohnDoe&DestinationUrl=http://localhost:4589/IdSrv3/AuthServices/Logout&AutoPost=true";
        }

        document.getElementById("idp-initiated-logout").addEventListener("click", idpLogout);

    </script>
</body>
</html>
